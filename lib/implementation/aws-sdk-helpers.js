// Generated by CoffeeScript 1.7.1
(function() {
  var equal, fs, mime, path, propagate, _,
    __slice = [].slice;

  fs = require('fs');

  mime = require('mime');

  path = require('path');

  _ = require('underscore');

  equal = require('deep-equal');

  propagate = function(onErr, onSucc) {
    return function() {
      var err, rest;
      err = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (err != null) {
        return onErr(err);
      } else {
        return onSucc.apply(null, rest);
      }
    };
  };

  exports.putFile = function(s3client, _arg, callback) {
    var bucket, defaultContentType, filename, target;
    filename = _arg.filename, target = _arg.target, bucket = _arg.bucket, defaultContentType = _arg.defaultContentType;
    return s3client.putObject({
      ACL: 'public-read',
      Bucket: bucket,
      ContentType: path.extname(filename) === '' ? defaultContentType : mime.lookup(filename),
      Key: target.replace(/^\/*/g, ''),
      Body: fs.readFileSync(filename)
    }, callback);
  };

  exports.getBucketNames = function(s3client, callback) {
    return s3client.listBuckets({}, propagate(callback, function(_arg) {
      var Buckets;
      Buckets = _arg.Buckets;
      return callback(null, _.pluck(Buckets, 'Name'));
    }));
  };

  exports.createBucket = function(s3client, name, callback) {
    return s3client.createBucket({
      Bucket: name
    }, callback);
  };

  exports.giveEveryoneReadAccess = function(s3client, name, callback) {
    return s3client.getBucketAcl({
      Bucket: name
    }, propagate(callback, function(res) {
      var found, pars;
      pars = _.pick(res, 'Grants', 'Owner');
      found = [];
      pars.Grants.push({
        Permission: 'READ',
        Grantee: {
          URI: 'http://acs.amazonaws.com/groups/global/AllUsers',
          Type: 'Group'
        }
      });
      pars.Grants = _.filter(pars.Grants, function(grant) {
        if (!_.some(found, function(foundGrant) {
          return equal(grant, foundGrant);
        })) {
          return found.push(grant);
        }
      });
      return s3client.putBucketAcl({
        Bucket: name,
        AccessControlPolicy: pars
      }, callback);
    }));
  };

  exports.bucketToWebsite = function(s3client, _arg, callback) {
    var error, index, name;
    index = _arg.index, error = _arg.error, name = _arg.name;
    return s3client.putBucketWebsite({
      Bucket: name,
      WebsiteConfiguration: {
        IndexDocument: {
          Suffix: index
        },
        ErrorDocument: {
          Key: error
        }
      }
    }, callback);
  };

}).call(this);
