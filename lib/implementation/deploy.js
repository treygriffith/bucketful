// Generated by CoffeeScript 1.7.1
(function() {
  var Q, awsClient, maskString, path, powerfs, qfilter, wrench, _,
    __slice = [].slice;

  Q = require('q');

  _ = require('underscore');

  path = require('path');

  wrench = require('wrench');

  powerfs = require('powerfs');

  awsClient = require('./aws-client');

  qfilter = function(list, filterFunc) {
    var ps;
    ps = list.map(filterFunc);
    return Q.all(ps).then(function(mask) {
      return list.filter(function(x, i) {
        return mask[i];
      });
    });
  };

  maskString = function(str) {
    return str.slice(0, 4) + _.times(str.length - 4, function() {
      return '*';
    }).join('');
  };

  module.exports = function(_arg, callback) {
    var aws, bucket, createAwsClient, dns, error, index, key, log, output, powerfsFileExits, powerfsIsFile, region, secret, source;
    output = _arg.output, createAwsClient = _arg.createAwsClient, dns = _arg.dns, bucket = _arg.bucket, key = _arg.key, secret = _arg.secret, region = _arg.region, index = _arg.index, error = _arg.error, source = _arg.source;
    if (callback == null) {
      callback = function() {};
    }
    if (bucket == null) {
      return callback(new Error("Must supply a bucket"));
    }
    if (key == null) {
      return callback(new Error("Must supply an AWS key"));
    }
    if (secret == null) {
      return callback(new Error("Must supply an AWS secret token"));
    }
    if (source == null) {
      return callback(new Error("Must supply a source directory"));
    }
    log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (output != null) {
        return output.write(args.join(' ') + '\n');
      }
    };
    source = path.resolve(source);
    if (region == null) {
      region = 'us-east-1';
    }
    if (index == null) {
      index = 'index.html';
    }
    powerfsIsFile = Q.nbind(powerfs.isFile, powerfs);
    powerfsFileExits = Q.nbind((function(p, callback) {
      return powerfs.fileExists(p, function(r) {
        return callback(null, r);
      });
    }), powerfs);
    aws = awsClient(createAwsClient({
      region: region,
      key: key,
      secret: secret
    }));
    log("");
    log("Accessing aws account using key " + (maskString(key)) + " and secret " + (maskString(secret)) + ".");
    return powerfsFileExits(path.resolve(source, '404.html')).then(function(has404) {
      if (error) {
        return;
      }
      if (has404) {
        return error = '404.html';
      } else {
        return error = index;
      }
    }).then(function() {
      return aws.getBucketNames();
    }).then(function(buckets) {
      if (_(buckets).contains(bucket)) {
        return log("Bucket " + bucket + " found in the region " + region + ".");
      } else {
        log("Bucket " + bucket + " not found in the given account.");
        log("Attempting to create it in the region " + region + ".");
        return aws.createBucket(bucket).then(function() {
          return log("Bucket created.");
        });
      }
    }).then(function() {
      log("Setting website config using " + index + " as index and " + error + " as error.");
      return aws.bucketToWebsite({
        name: bucket,
        index: index,
        error: error
      });
    }).then(function() {
      log("Setting read access for everyone.");
      return aws.giveEveryoneReadAccess(bucket);
    }).then(function() {
      if (dns != null) {
        if ((dns.username != null) && (dns.password != null)) {
          log();
          log("Configuring DNS at " + dns.namespace + " with username " + (maskString(dns.username)) + " and password " + (maskString(dns.password)) + ".");
          return Q.nfcall(dns.setCNAME, bucket, "" + bucket + ".s3-website-" + region + ".amazonaws.com");
        } else {
          log();
          return log("WARNING: Provided domain registrar, but not username/password.");
        }
      }
    }).then(function() {
      return wrench.readdirSyncRecursive(source).map(function(x) {
        return {
          fullpath: path.join(source, x),
          name: x
        };
      });
    }).then(function(files) {
      return qfilter(files, function(file) {
        return powerfsIsFile(file.fullpath);
      });
    }).then(function(files) {
      var counter;
      log();
      log("Uploading " + source + ":");
      counter = 0;
      return Q.all(files.map(function(file, i) {
        return aws.putFile({
          defaultContentType: 'text/html',
          filename: file.fullpath,
          target: file.name,
          bucket: bucket
        }).then(function() {
          var counterStr, padding;
          counter++;
          padding = _.times(10, function() {
            return " ";
          }).join('');
          counterStr = (padding + counter).slice(-files.length.toString().length);
          return log("[" + counterStr + "/" + files.length + "] " + file.name);
        });
      }));
    }).then(function() {
      log("");
      log("Site now available on: http://" + bucket + ".s3-website-" + region + ".amazonaws.com");
      if ((dns != null) && (dns.username != null) && (dns.password != null)) {
        return log("DNS configured to also make it available at: http://" + bucket);
      } else {
        return log("No DNS configured.");
      }
    }).nodeify(callback);
  };

}).call(this);
